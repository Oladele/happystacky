<p>
  Archetypes are not real! They are just convenient labels for broad set of possible types. In our context, the web app developer has to make significant architecture decisions about how much the server should be responsible for generating each view and how much of this should the client application code be responsible for. To explain the concepts involved in this decision, it is instructive to express both extremes of this decision:

  <blockquote>

  <p>
    <h3>Server Generated Views</h3>
    Every time the user clicks or does something that requires a changed view, the browser makes a request to the server which responds with new dynamically generated views (as web pages) sent to the client browser. See the section <a href="/#app-dhtml">Server-Side Web Apps</a> for architecture highlight diagram and example tech stacks.
  </p>

  <p>
    <h3>Client Generated Views</h3>
    The <b>first time</b> a user acceses the app, the server sends application code to the client browser which then dynamically generates views (as web pages) in response to subsequent clicks by the user. In addition, a server also provides a data persistence service to the client application code. See the section <a href="/#app-spa">Client-Side Web Apps</a> for architecture highlight diagram and example stacks.
  </p>

  </blockquote>

  Though it is easier to explain and to grasp these two application architectures in isolation from each other, in reality web technology stacks, and the web developers who use them, may rely on a combination of server and client-generated views when implementing any given app. In particular, an app whose views are rendered by the server and sent to the client (as web pages) will very often have some (javascript) application code sent along with the views to further augment the view (such as showing form errors) as the client interacts with it. Conversely, a client rendered app whose javascript code is responsible for creating/displaying most views (as web pages), may have its initial "log-in" view or "welcome" view generated and sent by the server. The rendered views of web apps is referred to as a web page due to conventions of the world wide web standards introduced in the section <a href="/#site-app"> Web App or Web Site ?</a>.
</p>

<p>
  <blockquote>
    In both cases above, a server also handles application logic for persisting data. Data persistence is also known as CRUD application logic. CRUD stands for Create, Read, Update, Delete. And these are operations done on application data to implement many of the features which people expect when using native/web apps.
  </blockquote>
</p>