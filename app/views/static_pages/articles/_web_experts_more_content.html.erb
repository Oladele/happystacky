<p>
  
  <h3>Henrik Joreteg (Ampersand) </h3>
  One of the originators of the Ampersand client-side javascript libraries eschews frameworks. Instead, he argues for using modular composable libraries both on the server and the client.
  <blockquote>
    <p>
      <a  href="https://blog.andyet.com/2015/04/14/frontend-frameworks-to-pair-with-node"
          target="_blank">
        <h4>A frontend JavaScript framework to pair with Node.js</h4>
      </a>
      ...If you’ve bought into Node’s small module paradigm, stuff like Ember, Angular, and even jQuery can feel a bit like excessively large Duplo™ blocks...
    </p>
  </blockquote>

  <h3>Tom Dale (Ember) </h3>
  One of the originators of the Ember client-side framework makes the case (as does Henrik Joreteg) for client-side web apps backed by server-side APIs. But, Tom Dale also argues for using more comprehensive client and server application frameworks.
    
  <blockquote>
    <p>
      <a  href="http://blog.skylight.io/a-new-sense-of-purpose-for-rails/"
          target="_blank">
        <h4>A New Sense of Purpose for Rails</h4>
      </a>
      On the client, we have to choose the tools that deliver the best user experience. On iOS, that's using Objective-C or Swift with Cocoa. On Android, that's Java and the Android SDK. On the web, that's increasingly JavaScript and a framework like Ember.js.
    </p>
  </blockquote>
  <blockquote>
    <p>
       I believe Rails is by far the most productive way to build a backend for clients, whether native or JavaScript, to talk to.
    </p>
  </blockquote>


  <h3>David Hennemeier Hanson (Ruby On Rails) </h3>
  The originator of Ruby On Rails server-side framework gives a real world example of the compelling benefits of using a single server-side application to perform both business logic and views for all clients.
    
  <blockquote>
    <p>
      <a  href="https://signalvnoise.com/posts/3743-hybrid-sweet-spot-native-navigation-web-content#extended" 
          target="_blank">
        <h4>Hybrid sweet spot: Native navigation, web content</h4>
      </a>
      On the HTML side, we’re running a proud and polished monolith of a Rails application. The same controllers and models that are delivering the desktop web experience are responsible for the mobile views, which in turn are integrated into the iPhone and Android clients.
    </p>
  </blockquote>

</p>